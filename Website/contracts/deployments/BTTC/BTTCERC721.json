{
  "address": "0xfE0cDcA3F257E20eaAdeB292Cb2196BfD5e6626A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "BidId",
          "type": "uint256"
        }
      ],
      "name": "BidURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ProjectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "GranttId",
          "type": "uint256"
        }
      ],
      "name": "CreateGrantProject",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_EventTokenSearchIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_GrantEventIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_GrantEventURIs",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_GrantProjectIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_GrantVoteIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_JudgerURIs",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_SearchedStore",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "_getSearchedTokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bidId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_bidURI",
          "type": "string"
        }
      ],
      "name": "_setBidURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_raised",
          "type": "string"
        }
      ],
      "name": "_setEventRaised",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_eventWallet",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_eventURI",
          "type": "string"
        }
      ],
      "name": "_setEventURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_eventURI",
          "type": "string"
        }
      ],
      "name": "_setGrantEventURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "TokenBidId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "TokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_BidURI",
          "type": "string"
        }
      ],
      "name": "_setTokenBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "EventTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "EventId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "_setTokenEvent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "_setTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_claimer",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_eventid",
          "type": "uint256"
        }
      ],
      "name": "claimToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_bidURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_updatedURI",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_eventid",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_raised",
          "type": "string"
        }
      ],
      "name": "createBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_eventWallet",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_eventURI",
          "type": "string"
        }
      ],
      "name": "createEvent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_eventURI",
          "type": "string"
        }
      ],
      "name": "createGrantEvent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "Wallet",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "ProjectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "GranttId",
          "type": "uint256"
        }
      ],
      "name": "createGrantVote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "name": "eventURI",
      "outputs": [
        {
          "internalType": "string[2]",
          "name": "",
          "type": "string[2]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_bidURI",
          "type": "string"
        }
      ],
      "name": "getBidIdByUri",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "TokenID",
          "type": "uint256"
        }
      ],
      "name": "getBidsSearchToken",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "Grantid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ProjectId",
          "type": "uint256"
        }
      ],
      "name": "getCheckSubmittedProjectGrant",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        }
      ],
      "name": "getEventRaised",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "EventId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "getGetEventsTokenID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "Wallet",
          "type": "string"
        }
      ],
      "name": "getSearchEventbyWallet",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "Grantid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ProjectId",
          "type": "uint256"
        }
      ],
      "name": "getSearchedGrantVoteProject",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "Grantid",
          "type": "uint256"
        }
      ],
      "name": "getSearchedProjectByGrantID",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "TokenID",
          "type": "uint256"
        }
      ],
      "name": "getTotalBid",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_eventURI",
          "type": "string"
        }
      ],
      "name": "geteventIdByUri",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "gettokenIdByUri",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "EventID",
          "type": "uint256"
        }
      ],
      "name": "gettokenSearchEventTotal",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "GrantProjectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ProjectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "GranttId",
          "type": "uint256"
        }
      ],
      "name": "setGrantProject",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "GrantVoteId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "Wallet",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "ProjectId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "GranttId",
          "type": "string"
        }
      ],
      "name": "setGrantVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalEvent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalGrantEvent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf22a479b684d4fcf2afc08b763b409f05c092d26ea87e13f1a9720c8b85aa770",
  "receipt": {
    "to": null,
    "from": "0x43F44Fa7842dED402Fd098e80a04D8BFc5997Ea1",
    "contractAddress": "0xfE0cDcA3F257E20eaAdeB292Cb2196BfD5e6626A",
    "transactionIndex": 0,
    "gasUsed": "4714509",
    "logsBloom": "0x
    "blockHash": "0x67cf83546dc7a4f1e5e6b81a87e58fbc76e052d0f760374d75549a56b4339751",
    "transactionHash": "0xf22a479b684d4fcf2afc08b763b409f05c092d26ea87e13f1a9720c8b85aa770",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 9491072,
        "transactionHash": "0xf22a479b684d4fcf2afc08b763b409f05c092d26ea87e13f1a9720c8b85aa770",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000043f44fa7842ded402fd098e80a04d8bfc5997ea1",
          "0x000000000000000000000000f4c2f1d772488cc6d3ec3c703b9710fa2c0e227e"
        ],
        "data": "0x00000000000000000000000000000000000000000000004cac162f16969fc000000000000000000000000000000000000000000000084595161401484a000000000000000000000000000000000000000000000000f8a2da0b93dcf9d3355db800000000000000000000000000000000000000000008454869fdd231b3604000000000000000000000000000000000000000000000f8a326b7aa0c1069d51db8",
        "logIndex": 0,
        "blockHash": "0x67cf83546dc7a4f1e5e6b81a87e58fbc76e052d0f760374d75549a56b4339751"
      }
    ],
    "blockNumber": 9491072,
    "cumulativeGasUsed": "4714509",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "BTT",
    "BTT"
  ],
  "numDeployments": 1,
  "solcInputHash": "4a967995954961f5c9ec16c73a93be23",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"BidId\",\"type\":\"uint256\"}],\"name\":\"BidURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ProjectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"GranttId\",\"type\":\"uint256\"}],\"name\":\"CreateGrantProject\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_EventTokenSearchIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_GrantEventIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_GrantEventURIs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_GrantProjectIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_GrantVoteIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_JudgerURIs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_SearchedStore\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"_getSearchedTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_bidURI\",\"type\":\"string\"}],\"name\":\"_setBidURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_raised\",\"type\":\"string\"}],\"name\":\"_setEventRaised\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_eventWallet\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_eventURI\",\"type\":\"string\"}],\"name\":\"_setEventURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_eventURI\",\"type\":\"string\"}],\"name\":\"_setGrantEventURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"TokenBidId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_BidURI\",\"type\":\"string\"}],\"name\":\"_setTokenBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"EventTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"EventId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"_setTokenEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"_setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_eventid\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_bidURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_updatedURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_eventid\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_raised\",\"type\":\"string\"}],\"name\":\"createBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_eventWallet\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_eventURI\",\"type\":\"string\"}],\"name\":\"createEvent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_eventURI\",\"type\":\"string\"}],\"name\":\"createGrantEvent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"Wallet\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"ProjectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"GranttId\",\"type\":\"uint256\"}],\"name\":\"createGrantVote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"eventURI\",\"outputs\":[{\"internalType\":\"string[2]\",\"name\":\"\",\"type\":\"string[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_bidURI\",\"type\":\"string\"}],\"name\":\"getBidIdByUri\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"TokenID\",\"type\":\"uint256\"}],\"name\":\"getBidsSearchToken\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Grantid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ProjectId\",\"type\":\"uint256\"}],\"name\":\"getCheckSubmittedProjectGrant\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"getEventRaised\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"EventId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"getGetEventsTokenID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"Wallet\",\"type\":\"string\"}],\"name\":\"getSearchEventbyWallet\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Grantid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ProjectId\",\"type\":\"uint256\"}],\"name\":\"getSearchedGrantVoteProject\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Grantid\",\"type\":\"uint256\"}],\"name\":\"getSearchedProjectByGrantID\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"TokenID\",\"type\":\"uint256\"}],\"name\":\"getTotalBid\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_eventURI\",\"type\":\"string\"}],\"name\":\"geteventIdByUri\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"gettokenIdByUri\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"EventID\",\"type\":\"uint256\"}],\"name\":\"gettokenSearchEventTotal\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"GrantProjectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ProjectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"GranttId\",\"type\":\"uint256\"}],\"name\":\"setGrantProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"GrantVoteId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"Wallet\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ProjectId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"GranttId\",\"type\":\"string\"}],\"name\":\"setGrantVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEvent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalGrantEvent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BTTCERC721.sol\":\"BTTCERC721\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x921f012325281f7d81e29c53a13824cf6c2c5d77232065d0d4f3f912e97af6ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/BTTCERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\ncontract BTTCERC721 is ERC721 {\\n\\tuint256 private _tokenIds;\\n\\tuint256 private _bidIds;\\n\\tuint256 private _eventIds;\\n    uint256 public _GrantEventIds;\\n\\tuint256 public _GrantProjectIds;\\n\\tuint256 public _GrantVoteIds;\\n\\tuint256 private _EventTokenIds;\\n\\tuint256 private _TokenBidIds;\\n\\tuint256 public _EventTokenSearchIds;\\n\\tmapping(uint256 => string[2]) private AllEventTokens;\\n\\tmapping(uint256 => string[3]) private AllGrantVotes;\\n    mapping(uint256 => uint256[2]) private AllGrantProject;\\n\\tmapping(uint256 => string[2]) private AllTokensBids;\\n\\tmapping(uint256 => string[2]) public _SearchedStore;\\n\\tmapping(uint256 => string) private _bidURIs;\\n\\tmapping(uint256 => string) private _tokenURIs;\\n\\tmapping(uint256 => string[2]) private _eventURIs;\\n\\tmapping(uint256 => string) public _GrantEventURIs;\\n    mapping(uint256 => string) public  _JudgerURIs;\\n\\tmapping(uint256 => string) private _eventRaised;\\n\\tmapping(string => string) private _eventTokens;\\n\\n\\tconstructor(string memory name, string memory symbol)\\n\\t\\tERC721(name, symbol)\\n\\t{}\\n\\nfunction claimToken(\\n\\t\\taddress _claimer,\\n\\t\\tstring memory _tokenURI,\\n\\t\\tuint256 _eventid\\n\\t) public returns (uint256) {\\n\\t\\t_mint(_claimer, _tokenIds);\\n\\t\\t_setTokenURI(_tokenIds, _tokenURI);\\n\\t\\t_setTokenEvent(_EventTokenIds, _eventid, _tokenURI);\\n\\t\\t_tokenIds++;\\n\\t\\t_EventTokenIds++;\\n\\t\\treturn _tokenIds;\\n\\t}\\n\\n\\n\\nfunction _setTokenEvent(\\n\\t\\tuint256 EventTokenId,\\n\\t\\tuint256 EventId,\\n\\t\\tstring memory _tokenURI\\n\\t) public virtual {\\n\\t\\tAllEventTokens[EventTokenId] = [\\n\\t\\t\\tStrings.toString(EventId),\\n\\t\\t\\tstring(_tokenURI)\\n\\t\\t];\\n\\t}\\nfunction createEvent(string memory _eventWallet,string memory _eventURI)\\n\\t\\tpublic\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\t_setEventURI(_eventIds,_eventWallet, _eventURI);\\n\\t\\t_setEventRaised(_eventIds, \\\"0\\\");\\n\\t\\t_eventIds++;\\n\\n\\t\\treturn _eventIds;\\n\\t}\\n\\t\\n\\nfunction setGrantProject(\\t\\n\\t\\tuint256 GrantProjectId,\\n\\t\\tuint256 ProjectId,\\n\\t\\tuint256 GranttId\\n\\t) public virtual {\\n\\t\\tAllGrantProject[GrantProjectId] = [GranttId,ProjectId];\\n\\n\\t}\\n\\n\\nfunction CreateGrantProject(\\n\\t\\tuint256 ProjectId,\\n\\t\\tuint256 GranttId\\n\\t) public returns (uint256) {\\n\\t\\tsetGrantProject(_GrantProjectIds,ProjectId,GranttId);\\n\\t\\t_GrantProjectIds++;\\n\\t\\t\\n\\t\\treturn _GrantProjectIds;\\n\\t}\\n\\n\\n\\n\\nfunction createGrantEvent(string memory _eventURI)\\n\\t\\tpublic\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\t_setGrantEventURI(_GrantEventIds, _eventURI);\\n\\t\\t_GrantEventIds++;\\n\\n\\t\\treturn _GrantEventIds;\\n\\t}\\n\\n\\nfunction getCheckSubmittedProjectGrant(uint256 Grantid, uint256 ProjectId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (bool)\\n\\t{\\t\\t\\n\\t\\t\\n\\t\\tfor (uint256 i = 0; i < _GrantProjectIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tAllGrantProject[i][0] == Grantid && \\n\\t\\t\\t\\tAllGrantProject[i][1] == ProjectId \\t\\t\\t\\t\\n\\t\\t\\t) {\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t\\n\\t\\treturn false;\\n\\t}\\n\\n\\nfunction getSearchedProjectByGrantID(uint256 Grantid)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (uint256[] memory)\\n\\t{\\n\\t\\t\\n\\t\\tuint256 _TemporarySearch = 0;\\n\\t\\tuint256 _SearchIds = 0;\\n\\t\\t\\n\\t\\t\\n\\t\\tfor (uint256 i = 0; i < _GrantProjectIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tAllGrantProject[i][0] == Grantid\\n\\t\\t\\t) {\\n\\t\\t\\t\\t_TemporarySearch++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tuint256[] memory _SearchedProject = new uint256[](_TemporarySearch);\\n\\n\\t\\tfor (uint256 i = 0; i < _GrantProjectIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tAllGrantProject[i][0] == Grantid\\n\\t\\t\\t) {\\n\\t\\t\\t\\t_SearchedProject[_SearchIds] = AllGrantProject[i][1];\\n\\t\\t\\t\\t_SearchIds++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\n\\t\\treturn _SearchedProject;\\n\\t}\\n\\nfunction setGrantVote(\\t\\n\\t\\tuint256 GrantVoteId,\\n\\t\\tstring memory Wallet,\\n\\t\\tstring memory  ProjectId,\\n\\t\\tstring memory  GranttId\\n\\t) public virtual {\\n\\t\\tAllGrantVotes[GrantVoteId] = [GranttId,ProjectId,Wallet];\\n\\n\\t}\\n\\n\\nfunction createGrantVote(string memory Wallet,uint256 ProjectId,uint256 GranttId)\\n\\t\\tpublic\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tsetGrantVote(_GrantVoteIds, Wallet,Strings.toString(ProjectId),Strings.toString(GranttId));\\n\\t\\t_GrantVoteIds++;\\n\\n\\t\\treturn _GrantVoteIds;\\n\\t}\\nfunction getSearchedGrantVoteProject(uint256 Grantid,uint256 ProjectId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (string[] memory)\\n\\t{\\n\\t\\t\\n\\t\\tuint256 _TemporarySearch = 0;\\n\\t\\tuint256 _SearchIds = 0;\\n\\t\\t\\n\\t\\t\\n\\t\\tfor (uint256 i = 0; i < _GrantVoteIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(AllGrantVotes[i][0])) == keccak256(bytes(Strings.toString(Grantid))) &&\\n\\t\\t\\t\\tkeccak256(bytes(AllGrantVotes[i][1])) == keccak256(bytes(Strings.toString(ProjectId)))\\n\\t\\t\\t\\t\\n\\t\\t\\t) {\\n\\t\\t\\t\\t_TemporarySearch++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tstring[] memory _SearchedProject = new string[](_TemporarySearch);\\n\\n\\t\\n\\t\\tfor (uint256 i = 0; i < _GrantVoteIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(AllGrantVotes[i][0])) == keccak256(bytes(Strings.toString(Grantid))) &&\\n\\t\\t\\t\\tkeccak256(bytes(AllGrantVotes[i][1])) == keccak256(bytes(Strings.toString(ProjectId)))\\n\\t\\t\\t\\t\\n\\t\\t\\t) {\\n\\t\\t\\t_SearchedProject[_SearchIds] = AllGrantVotes[i][2];\\n\\t\\t\\t_SearchIds++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\n\\t\\treturn _SearchedProject;\\n\\t}\\n\\n\\n\\nfunction geteventIdByUri(string memory _eventURI)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tfor (uint256 i = 0; i < _eventIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(_eventURIs[i][1])) == keccak256(bytes(_eventURI))\\n\\t\\t\\t) {\\n\\t\\t\\t\\treturn i;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn 0;\\n\\t}\\n\\n\\nfunction gettokenIdByUri(string memory _tokenURI)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tfor (uint256 i = 0; i < _tokenIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(_tokenURIs[i])) == keccak256(bytes(_tokenURI))\\n\\t\\t\\t) {\\n\\t\\t\\t\\treturn i;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn 0;\\n\\t}\\n\\nfunction getBidIdByUri(string memory _bidURI)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tfor (uint256 i = 0; i < _bidIds; i++) {\\n\\t\\t\\tif (keccak256(bytes(_bidURIs[i])) == keccak256(bytes(_bidURI))) {\\n\\t\\t\\t\\treturn i;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn 0;\\n\\t}\\n\\nfunction gettokenSearchEventTotal(uint256 EventID)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (string[] memory)\\n\\t{\\n\\t\\tstring[] memory _SearchedStoreToken = new string[](10);\\n\\n\\t\\tuint256 _EventTokenSearchIds2 = 0;\\n\\n\\t\\tfor (uint256 i = 0; i < _EventTokenIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(AllEventTokens[i][0])) ==\\n\\t\\t\\t\\tkeccak256(bytes(Strings.toString(EventID)))\\n\\t\\t\\t) {\\n\\t\\t\\t\\t_SearchedStoreToken[_EventTokenSearchIds2] = AllEventTokens[i][\\n\\t\\t\\t\\t\\t1\\n\\t\\t\\t\\t];\\n\\t\\t\\t\\t_EventTokenSearchIds2++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn _SearchedStoreToken;\\n\\t}\\n\\nfunction getSearchEventbyWallet(string memory Wallet)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (string[] memory)\\n\\t{\\n\\t\\n\\t\\tuint256 _TemporarySearch = 0;\\n\\t\\tuint256 _SearchIds = 0;\\n\\n\\t\\tfor (uint256 i = 0; i < _eventIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(_eventURIs[i][0])) ==\\n\\t\\t\\t\\tkeccak256(bytes(Wallet))\\n\\t\\t\\t) {\\n\\t\\t\\t\\t_TemporarySearch++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tstring[] memory _SearchedStoreEvents = new string[](_TemporarySearch);\\n\\t\\tfor (uint256 i = 0; i < _eventIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(_eventURIs[i][0])) ==\\n\\t\\t\\t\\tkeccak256(bytes(Wallet))\\n\\t\\t\\t) {\\n\\t\\t\\t\\t_SearchedStoreEvents[_SearchIds] = _eventURIs[i][1];\\n\\t\\t\\t\\t_SearchIds++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\n\\t\\treturn _SearchedStoreEvents;\\n\\t}\\n\\nfunction getGetEventsTokenID(uint256 EventId, string memory _tokenURI)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tfor (uint256 i = 0; i < _EventTokenIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(AllEventTokens[i][0])) ==\\n\\t\\t\\t\\tkeccak256(bytes(Strings.toString(EventId))) &&\\n\\t\\t\\t\\tkeccak256(bytes(AllEventTokens[i][1])) ==\\n\\t\\t\\t\\tkeccak256(bytes(_tokenURI))\\n\\t\\t\\t) {\\n\\t\\t\\t\\treturn i;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn 0;\\n\\t}\\n\\nfunction _getSearchedTokenURI(uint256 _tokenId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (string memory)\\n\\t{\\n\\t\\treturn _SearchedStore[_tokenId][0];\\n\\t}\\n\\nfunction _setEventURI(uint256 eventId,  string memory _eventWallet ,string memory _eventURI)\\n\\t\\tpublic\\n\\t\\tvirtual\\n\\t{\\n\\t\\t_eventURIs[eventId] = [\\n\\t\\t\\t_eventWallet,\\n\\t\\t\\t_eventURI\\n\\t\\t];\\n\\t\\t_eventRaised[eventId] = \\\"0\\\";\\n\\t}\\n\\nfunction _setGrantEventURI(uint256 eventId, string memory _eventURI)\\n\\t\\tpublic\\n\\t\\tvirtual\\n\\t{\\n\\t\\t_GrantEventURIs[eventId] = _eventURI;\\n\\t}\\n\\n\\nfunction _setTokenURI(uint256 tokenId, string memory _tokenURI)\\n\\t\\tpublic\\n\\t\\tvirtual\\n\\t{\\n\\t\\trequire(\\n\\t\\t\\t_exists(tokenId),\\n\\t\\t\\t\\\"ERC721Metadata: URI set of nonexistent token\\\"\\n\\t\\t);\\n\\t\\t_tokenURIs[tokenId] = _tokenURI;\\n\\t}\\n\\nfunction eventURI(uint256 eventId) public view returns (string[2] memory) {\\n\\t\\treturn _eventURIs[eventId];\\n\\t}\\n\\nfunction tokenURI(uint256 tokenId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (string memory)\\n\\t{\\n\\t\\trequire(\\n\\t\\t\\t_exists(tokenId),\\n\\t\\t\\t\\\"ERC721Metadata: URI query for nonexistent token\\\"\\n\\t\\t);\\n\\n\\t\\treturn _tokenURIs[tokenId];\\n\\t}\\n\\nfunction totalSupply() public view returns (uint256) {\\n\\t\\treturn _tokenIds;\\n\\t}\\n\\nfunction totalEvent() public view returns (uint256) {\\n\\t\\treturn _eventIds;\\n\\t}\\n\\nfunction totalGrantEvent() public view returns (uint256) {\\n\\t\\treturn _GrantProjectIds;\\n\\t}\\n\\nfunction _setBidURI(uint256 bidId, string memory _bidURI) public virtual {\\n\\t\\t_bidURIs[bidId] = _bidURI;\\n\\t}\\n\\nfunction BidURI(uint256 BidId) public view returns (string memory) {\\n\\t\\treturn _bidURIs[BidId];\\n\\t}\\n\\nfunction getTotalBid(uint256 TokenID)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (string[] memory)\\n\\t{\\n\\t\\tstring[] memory _SearchedStoreBid = new string[](10);\\n\\n\\t\\tuint256 _TokenBidSearchIds2 = 0;\\n\\n\\t\\tfor (uint256 i = 0; i < _TokenBidIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(AllTokensBids[i][0])) ==\\n\\t\\t\\t\\tkeccak256(bytes(Strings.toString(TokenID)))\\n\\t\\t\\t) {\\n\\t\\t\\t\\t_SearchedStoreBid[_TokenBidSearchIds2] = AllTokensBids[i][1];\\n\\t\\t\\t\\t_TokenBidSearchIds2++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn _SearchedStoreBid;\\n\\t}\\n\\nfunction getBidsSearchToken(uint256 TokenID)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (string[] memory)\\n\\t{\\n\\t\\tstring[] memory _SearchedStoreBid = new string[](10);\\n\\n\\t\\tuint256 _TokenBidSearchIds2 = 0;\\n\\n\\t\\tfor (uint256 i = 0; i < _TokenBidIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(AllTokensBids[i][0])) ==\\n\\t\\t\\t\\tkeccak256(bytes(Strings.toString(TokenID)))\\n\\t\\t\\t) {\\n\\t\\t\\t\\t_SearchedStoreBid[_TokenBidSearchIds2] = AllTokensBids[i][1];\\n\\t\\t\\t\\t_TokenBidSearchIds2++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn _SearchedStoreBid;\\n\\t}\\n\\nfunction _setTokenBid(\\n\\t\\tuint256 TokenBidId,\\n\\t\\tuint256 TokenId,\\n\\t\\tstring memory _BidURI\\n\\t) public virtual {\\n\\t\\tAllTokensBids[TokenBidId] = [\\n\\t\\t\\tStrings.toString(TokenId),\\n\\t\\t\\tstring(_BidURI)\\n\\t\\t];\\n\\t}\\n \\nfunction getEventRaised(uint256 _eventId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (string memory)\\n\\t{\\n\\t\\treturn _eventRaised[_eventId];\\n\\t}\\n\\nfunction _setEventRaised(uint256 _eventId, string memory _raised)\\n\\t\\tpublic\\n\\t{\\n\\t\\t_eventRaised[_eventId] = _raised;\\n\\t}\\n\\n function createBid(\\n\\t\\tuint256 _tokenId,\\n\\t\\tstring memory _bidURI,\\n\\t\\tstring memory _updatedURI,\\n\\t\\tuint256 _eventid,\\n\\t\\tstring memory _raised\\n\\t) public   {\\n\\t\\tuint256 _EventTokenId = getGetEventsTokenID(\\n\\t\\t\\t_eventid,\\n\\t\\t\\t_tokenURIs[_tokenId]\\n\\t\\t);\\n\\t\\t_tokenURIs[_tokenId] = _updatedURI;\\n\\t\\t_setTokenEvent(_EventTokenId, _eventid, _updatedURI);\\n\\t\\t_setEventRaised(_eventid,_raised);\\n\\n\\t\\t_setTokenBid(_TokenBidIds, _tokenId, _bidURI);\\n\\t\\t_TokenBidIds++;\\n\\t\\t_bidIds++;\\n\\t}\\n}\\n\\n\\n\\n\",\"keccak256\":\"0x6e3f45d153ebcc528cf38eaee0ccb185f7efd7d8d53e63eb7d2af63899862c4a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162005731380380620057318339818101604052810190620000379190620001a3565b818181600090805190602001906200005192919062000075565b5080600190805190602001906200006a92919062000075565b5050505050620003ac565b8280546200008390620002bd565b90600052602060002090601f016020900481019282620000a75760008555620000f3565b82601f10620000c257805160ff1916838001178555620000f3565b82800160010185558215620000f3579182015b82811115620000f2578251825591602001919060010190620000d5565b5b50905062000102919062000106565b5090565b5b808211156200012157600081600090555060010162000107565b5090565b60006200013c620001368462000251565b62000228565b9050828152602081018484840111156200015b576200015a6200038c565b5b6200016884828562000287565b509392505050565b600082601f83011262000188576200018762000387565b5b81516200019a84826020860162000125565b91505092915050565b60008060408385031215620001bd57620001bc62000396565b5b600083015167ffffffffffffffff811115620001de57620001dd62000391565b5b620001ec8582860162000170565b925050602083015167ffffffffffffffff81111562000210576200020f62000391565b5b6200021e8582860162000170565b9150509250929050565b60006200023462000247565b9050620002428282620002f3565b919050565b6000604051905090565b600067ffffffffffffffff8211156200026f576200026e62000358565b5b6200027a826200039b565b9050602081019050919050565b60005b83811015620002a75780820151818401526020810190506200028a565b83811115620002b7576000848401525b50505050565b60006002820490506001821680620002d657607f821691505b60208210811415620002ed57620002ec62000329565b5b50919050565b620002fe826200039b565b810181811067ffffffffffffffff8211171562000320576200031f62000358565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b61537580620003bc6000396000f3fe608060405234801561001057600080fd5b50600436106103275760003560e01c80637cedbc1e116101b8578063c08e953d11610104578063dfc5e169116100a2578063e985e9c51161007c578063e985e9c514610ab4578063eb1d234d14610ae4578063f327579414610b14578063f880eb1914610b3057610327565b8063dfc5e16914610a38578063e08033d314610a68578063e257a94c14610a8457610327565b8063cef80b3a116100de578063cef80b3a146109b0578063d45fc516146109ce578063d654e993146109fe578063dcbe2ed914610a1a57610327565b8063c08e953d14610920578063c87b56dd14610950578063cd62ca1a1461098057610327565b806396d5a73911610171578063a99bee2e1161014b578063a99bee2e14610886578063aed47961146108a4578063b10a5dfa146108d4578063b88d4fde1461090457610327565b806396d5a7391461080a578063a0fd0c6a1461083a578063a22cb4651461086a57610327565b80637cedbc1e146107225780637eadfa6a1461075257806384eb8f6814610770578063912101cf1461078c578063932a196b146107bc57806395d89b41146107ec57610327565b806335011d90116102775780634ef4e80f1161023057806353c227cc1161020a57806353c227cc1461067657806361958158146106a65780636352211e146106c257806370a08231146106f257610327565b80634ef4e80f146105e65780635154380a14610616578063523796271461064657610327565b806335011d90146104ee5780633592dd801461051e578063390532711461053a57806342842e0e1461056a578063446a92e3146105865780634eb083ec146105b657610327565b8063144cbca6116102e45780631dacc07e116102be5780631dacc07e146104565780631e65e1171461047257806323b872dd146104a257806328520ab7146104be57610327565b8063144cbca6146103fe5780631677bf081461041c57806318160ddd1461043857610327565b8063015388681461032c57806301ffc9a71461034857806306fdde0314610378578063081812fc14610396578063095ea7b3146103c65780630ae240cf146103e2575b600080fd5b61034660048036038101906103419190613e51565b610b4e565b005b610362600480360381019061035d9190613c9a565b610bc2565b60405161036f919061478f565b60405180910390f35b610380610ca4565b60405161038d91906147aa565b60405180910390f35b6103b060048036038101906103ab9190613e24565b610d36565b6040516103bd91906146c2565b60405180910390f35b6103e060048036038101906103db9190613c5a565b610dbb565b005b6103fc60048036038101906103f79190613f38565b610ed3565b005b610406610f16565b60405161041391906149ac565b60405180910390f35b61043660048036038101906104319190613e51565b610f1c565b005b610440610f48565b60405161044d91906149ac565b60405180910390f35b610470600480360381019061046b9190613ff3565b610f52565b005b61048c60048036038101906104879190613cf4565b61107d565b604051610499919061474b565b60405180910390f35b6104bc60048036038101906104b79190613ad5565b6112a1565b005b6104d860048036038101906104d39190613e51565b611301565b6040516104e591906149ac565b60405180910390f35b61050860048036038101906105039190613beb565b6113da565b60405161051591906149ac565b60405180910390f35b61053860048036038101906105339190614102565b61143d565b005b610554600480360381019061054f91906140c2565b611481565b604051610561919061478f565b60405180910390f35b610584600480360381019061057f9190613ad5565b61151d565b005b6105a0600480360381019061059b9190613e24565b61153d565b6040516105ad91906147aa565b60405180910390f35b6105d060048036038101906105cb9190613e24565b6115e2565b6040516105dd91906147aa565b60405180910390f35b61060060048036038101906105fb91906140c2565b611687565b60405161060d91906149ac565b60405180910390f35b610630600480360381019061062b9190613e24565b6116b9565b60405161063d919061474b565b60405180910390f35b610660600480360381019061065b9190613cf4565b611869565b60405161066d91906149ac565b60405180910390f35b610690600480360381019061068b9190613e24565b611899565b60405161069d91906147aa565b60405180910390f35b6106c060048036038101906106bb9190613ead565b611939565b005b6106dc60048036038101906106d79190613e24565b6119d2565b6040516106e991906146c2565b60405180910390f35b61070c60048036038101906107079190613a68565b611a84565b60405161071991906149ac565b60405180910390f35b61073c60048036038101906107379190613e24565b611b3c565b60405161074991906147aa565b60405180910390f35b61075a611bf5565b60405161076791906149ac565b60405180910390f35b61078a60048036038101906107859190613e51565b611bff565b005b6107a660048036038101906107a191906140c2565b611c2b565b6040516107b3919061474b565b60405180910390f35b6107d660048036038101906107d19190613cf4565b611f0a565b6040516107e391906149ac565b60405180910390f35b6107f4611f79565b60405161080191906147aa565b60405180910390f35b610824600480360381019061081f9190613e24565b61200b565b604051610831919061476d565b60405180910390f35b610854600480360381019061084f9190613e24565b61216d565b6040516108619190614729565b60405180910390f35b610884600480360381019061087f9190613bab565b61224d565b005b61088e612263565b60405161089b91906149ac565b60405180910390f35b6108be60048036038101906108b99190613e24565b612269565b6040516108cb919061474b565b60405180910390f35b6108ee60048036038101906108e991906140c2565b612419565b6040516108fb91906147aa565b60405180910390f35b61091e60048036038101906109199190613b28565b6124c9565b005b61093a60048036038101906109359190613db5565b61252b565b60405161094791906149ac565b60405180910390f35b61096a60048036038101906109659190613e24565b61256f565b60405161097791906147aa565b60405180910390f35b61099a60048036038101906109959190613cf4565b61265c565b6040516109a791906149ac565b60405180910390f35b6109b86126df565b6040516109c591906149ac565b60405180910390f35b6109e860048036038101906109e39190613cf4565b6126e5565b6040516109f591906149ac565b60405180910390f35b610a186004803603810190610a139190614102565b612754565b005b610a22612798565b604051610a2f91906149ac565b60405180910390f35b610a526004803603810190610a4d9190613e24565b61279e565b604051610a5f91906147aa565b60405180910390f35b610a826004803603810190610a7d9190613e51565b61283e565b005b610a9e6004803603810190610a999190613d3d565b61286a565b604051610aab91906149ac565b60405180910390f35b610ace6004803603810190610ac99190613a95565b6128dd565b604051610adb919061478f565b60405180910390f35b610afe6004803603810190610af99190613e24565b612971565b604051610b0b919061474b565b60405180910390f35b610b2e6004803603810190610b299190614171565b612b21565b005b610b38612b5d565b604051610b4591906149ac565b60405180910390f35b610b5782612b67565b610b96576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8d9061492c565b60405180910390fd5b80601560008481526020019081526020016000209080519060200190610bbd92919061370b565b505050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610c8d57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610c9d5750610c9c82612bd3565b5b9050919050565b606060008054610cb390614cc7565b80601f0160208091040260200160405190810160405280929190818152602001828054610cdf90614cc7565b8015610d2c5780601f10610d0157610100808354040283529160200191610d2c565b820191906000526020600020905b815481529060010190602001808311610d0f57829003601f168201915b5050505050905090565b6000610d4182612b67565b610d80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d779061490c565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610dc6826119d2565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610e37576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2e9061496c565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610e56612c3d565b73ffffffffffffffffffffffffffffffffffffffff161480610e855750610e8481610e7f612c3d565b6128dd565b5b610ec4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ebb9061488c565b60405180910390fd5b610ece8383612c45565b505050565b60405180606001604052808281526020018381526020018481525060106000868152602001908152602001600020906003610f0f929190613791565b5050505050565b600e5481565b80601960008481526020019081526020016000209080519060200190610f4392919061370b565b505050565b6000600654905090565b6000610ff983601560008981526020019081526020016000208054610f7690614cc7565b80601f0160208091040260200160405190810160405280929190818152602001828054610fa290614cc7565b8015610fef5780601f10610fc457610100808354040283529160200191610fef565b820191906000526020600020905b815481529060010190602001808311610fd257829003601f168201915b5050505050611301565b90508360156000888152602001908152602001600020908051906020019061102292919061370b565b5061102e81848661143d565b6110388383610f1c565b611045600d548787612754565b600d600081548092919061105890614d2a565b91905055506007600081548092919061107090614d2a565b9190505550505050505050565b606060008060005b6008548110156110fb578480519060200120601660008381526020019081526020016000206000600281106110bd576110bc614e31565b5b016040516110cb91906146ab565b604051809103902014156110e85782806110e490614d2a565b9350505b80806110f390614d2a565b915050611085565b5060008267ffffffffffffffff81111561111857611117614e60565b5b60405190808252806020026020018201604052801561114b57816020015b60608152602001906001900390816111365790505b50905060005b6008548110156112955785805190602001206016600083815260200190815260200160002060006002811061118957611188614e31565b5b0160405161119791906146ab565b6040518091039020141561128257601660008281526020019081526020016000206001600281106111cb576111ca614e31565b5b0180546111d790614cc7565b80601f016020809104026020016040519081016040528092919081815260200182805461120390614cc7565b80156112505780601f1061122557610100808354040283529160200191611250565b820191906000526020600020905b81548152906001019060200180831161123357829003601f168201915b505050505082848151811061126857611267614e31565b5b6020026020010181905250828061127e90614d2a565b9350505b808061128d90614d2a565b915050611151565b50809350505050919050565b6112b26112ac612c3d565b82612cfe565b6112f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112e89061498c565b60405180910390fd5b6112fc838383612ddc565b505050565b600080600090505b600c548110156113ce5761131c84613043565b80519060200120600f600083815260200190815260200160002060006002811061134957611348614e31565b5b0160405161135791906146ab565b60405180910390201480156113ad57508280519060200120600f600083815260200190815260200160002060016002811061139557611394614e31565b5b016040516113a391906146ab565b6040518091039020145b156113bb57809150506113d4565b80806113c690614d2a565b915050611309565b50600090505b92915050565b60006113e8846006546131a4565b6113f460065484610b4e565b611401600c54838561143d565b6006600081548092919061141490614d2a565b9190505550600c600081548092919061142c90614d2a565b919050555060065490509392505050565b604051806040016040528061145184613043565b815260200182815250600f600085815260200190815260200160002090600261147b9291906137e4565b50505050565b600080600090505b600a548110156115115783601160008381526020019081526020016000206000600281106114ba576114b9614e31565b5b01541480156114ef575082601160008381526020019081526020016000206001600281106114eb576114ea614e31565b5b0154145b156114fe576001915050611517565b808061150990614d2a565b915050611489565b50600090505b92915050565b611538838383604051806020016040528060008152506124c9565b505050565b606060146000838152602001908152602001600020805461155d90614cc7565b80601f016020809104026020016040519081016040528092919081815260200182805461158990614cc7565b80156115d65780601f106115ab576101008083540402835291602001916115d6565b820191906000526020600020905b8154815290600101906020018083116115b957829003601f168201915b50505050509050919050565b606060196000838152602001908152602001600020805461160290614cc7565b80601f016020809104026020016040519081016040528092919081815260200182805461162e90614cc7565b801561167b5780601f106116505761010080835404028352916020019161167b565b820191906000526020600020905b81548152906001019060200180831161165e57829003601f168201915b50505050509050919050565b6000611696600a548484612b21565b600a60008154809291906116a990614d2a565b9190505550600a54905092915050565b60606000600a67ffffffffffffffff8111156116d8576116d7614e60565b5b60405190808252806020026020018201604052801561170b57816020015b60608152602001906001900390816116f65790505b5090506000805b600d5481101561185e5761172585613043565b805190602001206012600083815260200190815260200160002060006002811061175257611751614e31565b5b0160405161176091906146ab565b6040518091039020141561184b576012600082815260200190815260200160002060016002811061179457611793614e31565b5b0180546117a090614cc7565b80601f01602080910402602001604051908101604052809291908181526020018280546117cc90614cc7565b80156118195780601f106117ee57610100808354040283529160200191611819565b820191906000526020600020905b8154815290600101906020018083116117fc57829003601f168201915b505050505083838151811061183157611830614e31565b5b6020026020010181905250818061184790614d2a565b9250505b808061185690614d2a565b915050611712565b508192505050919050565b600061187760095483611bff565b6009600081548092919061188a90614d2a565b91905055506009549050919050565b601860205280600052604060002060009150905080546118b890614cc7565b80601f01602080910402602001604051908101604052809291908181526020018280546118e490614cc7565b80156119315780601f1061190657610100808354040283529160200191611931565b820191906000526020600020905b81548152906001019060200180831161191457829003601f168201915b505050505081565b6040518060400160405280838152602001828152506016600085815260200190815260200160002090600261196f9291906137e4565b506040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152506019600085815260200190815260200160002090805190602001906119cc92919061370b565b50505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611a7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a72906148cc565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611af5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aec906148ac565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060136000838152602001908152602001600020600060028110611b6457611b63614e31565b5b018054611b7090614cc7565b80601f0160208091040260200160405190810160405280929190818152602001828054611b9c90614cc7565b8015611be95780601f10611bbe57610100808354040283529160200191611be9565b820191906000526020600020905b815481529060010190602001808311611bcc57829003601f168201915b50505050509050919050565b6000600854905090565b80601760008481526020019081526020016000209080519060200190611c2692919061370b565b505050565b606060008060005b600b54811015611d0657611c4686613043565b8051906020012060106000838152602001908152602001600020600060038110611c7357611c72614e31565b5b01604051611c8191906146ab565b6040518091039020148015611cdf5750611c9a85613043565b8051906020012060106000838152602001908152602001600020600160038110611cc757611cc6614e31565b5b01604051611cd591906146ab565b6040518091039020145b15611cf3578280611cef90614d2a565b9350505b8080611cfe90614d2a565b915050611c33565b5060008267ffffffffffffffff811115611d2357611d22614e60565b5b604051908082528060200260200182016040528015611d5657816020015b6060815260200190600190039081611d415790505b50905060005b600b54811015611efd57611d6f87613043565b8051906020012060106000838152602001908152602001600020600060038110611d9c57611d9b614e31565b5b01604051611daa91906146ab565b6040518091039020148015611e085750611dc386613043565b8051906020012060106000838152602001908152602001600020600160038110611df057611def614e31565b5b01604051611dfe91906146ab565b6040518091039020145b15611eea5760106000828152602001908152602001600020600260038110611e3357611e32614e31565b5b018054611e3f90614cc7565b80601f0160208091040260200160405190810160405280929190818152602001828054611e6b90614cc7565b8015611eb85780601f10611e8d57610100808354040283529160200191611eb8565b820191906000526020600020905b815481529060010190602001808311611e9b57829003601f168201915b5050505050828481518110611ed057611ecf614e31565b5b60200260200101819052508280611ee690614d2a565b9350505b8080611ef590614d2a565b915050611d5c565b5080935050505092915050565b600080600090505b600654811015611f6e57828051906020012060156000838152602001908152602001600020604051611f4491906146ab565b60405180910390201415611f5b5780915050611f74565b8080611f6690614d2a565b915050611f12565b50600090505b919050565b606060018054611f8890614cc7565b80601f0160208091040260200160405190810160405280929190818152602001828054611fb490614cc7565b80156120015780601f10611fd657610100808354040283529160200191612001565b820191906000526020600020905b815481529060010190602001808311611fe457829003601f168201915b5050505050905090565b606060008060005b600a5481101561206e57846011600083815260200190815260200160002060006002811061204457612043614e31565b5b0154141561205b57828061205790614d2a565b9350505b808061206690614d2a565b915050612013565b5060008267ffffffffffffffff81111561208b5761208a614e60565b5b6040519080825280602002602001820160405280156120b95781602001602082028036833780820191505090505b50905060005b600a548110156121615785601160008381526020019081526020016000206000600281106120f0576120ef614e31565b5b0154141561214e576011600082815260200190815260200160002060016002811061211e5761211d614e31565b5b015482848151811061213357612132614e31565b5b602002602001018181525050828061214a90614d2a565b9350505b808061215990614d2a565b9150506120bf565b50809350505050919050565b612175613837565b60166000838152602001908152602001600020600280602002604051908101604052809291906000905b828210156122425783820180546121b590614cc7565b80601f01602080910402602001604051908101604052809291908181526020018280546121e190614cc7565b801561222e5780601f106122035761010080835404028352916020019161222e565b820191906000526020600020905b81548152906001019060200180831161221157829003601f168201915b50505050508152602001906001019061219f565b505050509050919050565b61225f612258612c3d565b838361337e565b5050565b60095481565b60606000600a67ffffffffffffffff81111561228857612287614e60565b5b6040519080825280602002602001820160405280156122bb57816020015b60608152602001906001900390816122a65790505b5090506000805b600d5481101561240e576122d585613043565b805190602001206012600083815260200190815260200160002060006002811061230257612301614e31565b5b0160405161231091906146ab565b604051809103902014156123fb576012600082815260200190815260200160002060016002811061234457612343614e31565b5b01805461235090614cc7565b80601f016020809104026020016040519081016040528092919081815260200182805461237c90614cc7565b80156123c95780601f1061239e576101008083540402835291602001916123c9565b820191906000526020600020905b8154815290600101906020018083116123ac57829003601f168201915b50505050508383815181106123e1576123e0614e31565b5b602002602001018190525081806123f790614d2a565b9250505b808061240690614d2a565b9150506122c2565b508192505050919050565b6013602052816000526040600020816002811061243557600080fd5b0160009150915050805461244890614cc7565b80601f016020809104026020016040519081016040528092919081815260200182805461247490614cc7565b80156124c15780601f10612496576101008083540402835291602001916124c1565b820191906000526020600020905b8154815290600101906020018083116124a457829003601f168201915b505050505081565b6124da6124d4612c3d565b83612cfe565b612519576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125109061498c565b60405180910390fd5b612525848484846134eb565b50505050565b600061254b600b548561253d86613043565b61254686613043565b610ed3565b600b600081548092919061255e90614d2a565b9190505550600b5490509392505050565b606061257a82612b67565b6125b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125b09061494c565b60405180910390fd5b6015600083815260200190815260200160002080546125d790614cc7565b80601f016020809104026020016040519081016040528092919081815260200182805461260390614cc7565b80156126505780601f1061262557610100808354040283529160200191612650565b820191906000526020600020905b81548152906001019060200180831161263357829003601f168201915b50505050509050919050565b600080600090505b6008548110156126d45782805190602001206016600083815260200190815260200160002060016002811061269c5761269b614e31565b5b016040516126aa91906146ab565b604051809103902014156126c157809150506126da565b80806126cc90614d2a565b915050612664565b50600090505b919050565b600a5481565b600080600090505b6007548110156127495782805190602001206014600083815260200190815260200160002060405161271f91906146ab565b60405180910390201415612736578091505061274f565b808061274190614d2a565b9150506126ed565b50600090505b919050565b604051806040016040528061276884613043565b815260200182815250601260008581526020019081526020016000209060026127929291906137e4565b50505050565b600b5481565b601760205280600052604060002060009150905080546127bd90614cc7565b80601f01602080910402602001604051908101604052809291908181526020018280546127e990614cc7565b80156128365780601f1061280b57610100808354040283529160200191612836565b820191906000526020600020905b81548152906001019060200180831161281957829003601f168201915b505050505081565b8060146000848152602001908152602001600020908051906020019061286592919061370b565b505050565b60006128796008548484611939565b6128ba6008546040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250610f1c565b600860008154809291906128cd90614d2a565b9190505550600854905092915050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60606000600a67ffffffffffffffff8111156129905761298f614e60565b5b6040519080825280602002602001820160405280156129c357816020015b60608152602001906001900390816129ae5790505b5090506000805b600c54811015612b16576129dd85613043565b80519060200120600f6000838152602001908152602001600020600060028110612a0a57612a09614e31565b5b01604051612a1891906146ab565b60405180910390201415612b0357600f6000828152602001908152602001600020600160028110612a4c57612a4b614e31565b5b018054612a5890614cc7565b80601f0160208091040260200160405190810160405280929190818152602001828054612a8490614cc7565b8015612ad15780601f10612aa657610100808354040283529160200191612ad1565b820191906000526020600020905b815481529060010190602001808311612ab457829003601f168201915b5050505050838381518110612ae957612ae8614e31565b5b60200260200101819052508180612aff90614d2a565b9250505b8080612b0e90614d2a565b9150506129ca565b508192505050919050565b60405180604001604052808281526020018381525060116000858152602001908152602001600020906002612b5792919061385e565b50505050565b6000600a54905090565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16612cb8836119d2565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000612d0982612b67565b612d48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d3f9061486c565b60405180910390fd5b6000612d53836119d2565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480612d955750612d9481856128dd565b5b80612dd357508373ffffffffffffffffffffffffffffffffffffffff16612dbb84610d36565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16612dfc826119d2565b73ffffffffffffffffffffffffffffffffffffffff1614612e52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e49906147ec565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612ec2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612eb99061482c565b60405180910390fd5b612ecd838383613547565b612ed8600082612c45565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612f289190614bdd565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612f7f9190614b56565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461303e83838361354c565b505050565b6060600082141561308b576040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250905061319f565b600082905060005b600082146130bd5780806130a690614d2a565b915050600a826130b69190614bac565b9150613093565b60008167ffffffffffffffff8111156130d9576130d8614e60565b5b6040519080825280601f01601f19166020018201604052801561310b5781602001600182028036833780820191505090505b5090505b60008514613198576001826131249190614bdd565b9150600a856131339190614d73565b603061313f9190614b56565b60f81b81838151811061315557613154614e31565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856131919190614bac565b945061310f565b8093505050505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415613214576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161320b906148ec565b60405180910390fd5b61321d81612b67565b1561325d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132549061480c565b60405180910390fd5b61326960008383613547565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546132b99190614b56565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461337a6000838361354c565b5050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156133ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133e49061484c565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516134de919061478f565b60405180910390a3505050565b6134f6848484612ddc565b61350284848484613551565b613541576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613538906147cc565b60405180910390fd5b50505050565b505050565b505050565b60006135728473ffffffffffffffffffffffffffffffffffffffff166136e8565b156136db578373ffffffffffffffffffffffffffffffffffffffff1663150b7a0261359b612c3d565b8786866040518563ffffffff1660e01b81526004016135bd94939291906146dd565b602060405180830381600087803b1580156135d757600080fd5b505af192505050801561360857506040513d601f19601f820116820180604052508101906136059190613cc7565b60015b61368b573d8060008114613638576040519150601f19603f3d011682016040523d82523d6000602084013e61363d565b606091505b50600081511415613683576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161367a906147cc565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506136e0565b600190505b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b82805461371790614cc7565b90600052602060002090601f0160209004810192826137395760008555613780565b82601f1061375257805160ff1916838001178555613780565b82800160010185558215613780579182015b8281111561377f578251825591602001919060010190613764565b5b50905061378d919061389e565b5090565b82600381019282156137d3579160200282015b828111156137d25782518290805190602001906137c292919061370b565b50916020019190600101906137a4565b5b5090506137e091906138bb565b5090565b8260028101928215613826579160200282015b8281111561382557825182908051906020019061381592919061370b565b50916020019190600101906137f7565b5b50905061383391906138bb565b5090565b60405180604001604052806002905b60608152602001906001900390816138465790505090565b826002810192821561388d579160200282015b8281111561388c578251825591602001919060010190613871565b5b50905061389a919061389e565b5090565b5b808211156138b757600081600090555060010161389f565b5090565b5b808211156138db57600081816138d291906138df565b506001016138bc565b5090565b5080546138eb90614cc7565b6000825580601f106138fd575061391c565b601f01602090049060005260206000209081019061391b919061389e565b5b50565b600061393261392d846149ec565b6149c7565b90508281526020810184848401111561394e5761394d614e94565b5b613959848285614c85565b509392505050565b600061397461396f84614a1d565b6149c7565b9050828152602081018484840111156139905761398f614e94565b5b61399b848285614c85565b509392505050565b6000813590506139b2816152e3565b92915050565b6000813590506139c7816152fa565b92915050565b6000813590506139dc81615311565b92915050565b6000815190506139f181615311565b92915050565b600082601f830112613a0c57613a0b614e8f565b5b8135613a1c84826020860161391f565b91505092915050565b600082601f830112613a3a57613a39614e8f565b5b8135613a4a848260208601613961565b91505092915050565b600081359050613a6281615328565b92915050565b600060208284031215613a7e57613a7d614e9e565b5b6000613a8c848285016139a3565b91505092915050565b60008060408385031215613aac57613aab614e9e565b5b6000613aba858286016139a3565b9250506020613acb858286016139a3565b9150509250929050565b600080600060608486031215613aee57613aed614e9e565b5b6000613afc868287016139a3565b9350506020613b0d868287016139a3565b9250506040613b1e86828701613a53565b9150509250925092565b60008060008060808587031215613b4257613b41614e9e565b5b6000613b50878288016139a3565b9450506020613b61878288016139a3565b9350506040613b7287828801613a53565b925050606085013567ffffffffffffffff811115613b9357613b92614e99565b5b613b9f878288016139f7565b91505092959194509250565b60008060408385031215613bc257613bc1614e9e565b5b6000613bd0858286016139a3565b9250506020613be1858286016139b8565b9150509250929050565b600080600060608486031215613c0457613c03614e9e565b5b6000613c12868287016139a3565b935050602084013567ffffffffffffffff811115613c3357613c32614e99565b5b613c3f86828701613a25565b9250506040613c5086828701613a53565b9150509250925092565b60008060408385031215613c7157613c70614e9e565b5b6000613c7f858286016139a3565b9250506020613c9085828601613a53565b9150509250929050565b600060208284031215613cb057613caf614e9e565b5b6000613cbe848285016139cd565b91505092915050565b600060208284031215613cdd57613cdc614e9e565b5b6000613ceb848285016139e2565b91505092915050565b600060208284031215613d0a57613d09614e9e565b5b600082013567ffffffffffffffff811115613d2857613d27614e99565b5b613d3484828501613a25565b91505092915050565b60008060408385031215613d5457613d53614e9e565b5b600083013567ffffffffffffffff811115613d7257613d71614e99565b5b613d7e85828601613a25565b925050602083013567ffffffffffffffff811115613d9f57613d9e614e99565b5b613dab85828601613a25565b9150509250929050565b600080600060608486031215613dce57613dcd614e9e565b5b600084013567ffffffffffffffff811115613dec57613deb614e99565b5b613df886828701613a25565b9350506020613e0986828701613a53565b9250506040613e1a86828701613a53565b9150509250925092565b600060208284031215613e3a57613e39614e9e565b5b6000613e4884828501613a53565b91505092915050565b60008060408385031215613e6857613e67614e9e565b5b6000613e7685828601613a53565b925050602083013567ffffffffffffffff811115613e9757613e96614e99565b5b613ea385828601613a25565b9150509250929050565b600080600060608486031215613ec657613ec5614e9e565b5b6000613ed486828701613a53565b935050602084013567ffffffffffffffff811115613ef557613ef4614e99565b5b613f0186828701613a25565b925050604084013567ffffffffffffffff811115613f2257613f21614e99565b5b613f2e86828701613a25565b9150509250925092565b60008060008060808587031215613f5257613f51614e9e565b5b6000613f6087828801613a53565b945050602085013567ffffffffffffffff811115613f8157613f80614e99565b5b613f8d87828801613a25565b935050604085013567ffffffffffffffff811115613fae57613fad614e99565b5b613fba87828801613a25565b925050606085013567ffffffffffffffff811115613fdb57613fda614e99565b5b613fe787828801613a25565b91505092959194509250565b600080600080600060a0868803121561400f5761400e614e9e565b5b600061401d88828901613a53565b955050602086013567ffffffffffffffff81111561403e5761403d614e99565b5b61404a88828901613a25565b945050604086013567ffffffffffffffff81111561406b5761406a614e99565b5b61407788828901613a25565b935050606061408888828901613a53565b925050608086013567ffffffffffffffff8111156140a9576140a8614e99565b5b6140b588828901613a25565b9150509295509295909350565b600080604083850312156140d9576140d8614e9e565b5b60006140e785828601613a53565b92505060206140f885828601613a53565b9150509250929050565b60008060006060848603121561411b5761411a614e9e565b5b600061412986828701613a53565b935050602061413a86828701613a53565b925050604084013567ffffffffffffffff81111561415b5761415a614e99565b5b61416786828701613a25565b9150509250925092565b60008060006060848603121561418a57614189614e9e565b5b600061419886828701613a53565b93505060206141a986828701613a53565b92505060406141ba86828701613a53565b9150509250925092565b60006141d0838361440e565b905092915050565b60006141e4838361468d565b60208301905092915050565b6141f981614c11565b82525050565b600061420a82614a8d565b6142148185614aeb565b93508360208202850161422685614a4e565b8060005b85811015614262578484038952815161424385826141c4565b945061424e83614ac4565b925060208a0199505060018101905061422a565b50829750879550505050505092915050565b600061427f82614a98565b6142898185614af6565b93508360208202850161429b85614a58565b8060005b858110156142d757848403895281516142b885826141c4565b94506142c383614ad1565b925060208a0199505060018101905061429f565b50829750879550505050505092915050565b60006142f482614aa3565b6142fe8185614b07565b935061430983614a68565b8060005b8381101561433a57815161432188826141d8565b975061432c83614ade565b92505060018101905061430d565b5085935050505092915050565b61435081614c23565b82525050565b600061436182614aae565b61436b8185614b18565b935061437b818560208601614c94565b61438481614ea3565b840191505092915050565b6000815461439c81614cc7565b6143a68186614b29565b945060018216600081146143c157600181146143d257614405565b60ff19831686528186019350614405565b6143db85614a78565b60005b838110156143fd578154818901526001820191506020810190506143de565b838801955050505b50505092915050565b600061441982614ab9565b6144238185614b34565b9350614433818560208601614c94565b61443c81614ea3565b840191505092915050565b600061445282614ab9565b61445c8185614b45565b935061446c818560208601614c94565b61447581614ea3565b840191505092915050565b600061448d603283614b45565b915061449882614eb4565b604082019050919050565b60006144b0602583614b45565b91506144bb82614f03565b604082019050919050565b60006144d3601c83614b45565b91506144de82614f52565b602082019050919050565b60006144f6602483614b45565b915061450182614f7b565b604082019050919050565b6000614519601983614b45565b915061452482614fca565b602082019050919050565b600061453c602c83614b45565b915061454782614ff3565b604082019050919050565b600061455f603883614b45565b915061456a82615042565b604082019050919050565b6000614582602a83614b45565b915061458d82615091565b604082019050919050565b60006145a5602983614b45565b91506145b0826150e0565b604082019050919050565b60006145c8602083614b45565b91506145d38261512f565b602082019050919050565b60006145eb602c83614b45565b91506145f682615158565b604082019050919050565b600061460e602c83614b45565b9150614619826151a7565b604082019050919050565b6000614631602f83614b45565b915061463c826151f6565b604082019050919050565b6000614654602183614b45565b915061465f82615245565b604082019050919050565b6000614677603183614b45565b915061468282615294565b604082019050919050565b61469681614c7b565b82525050565b6146a581614c7b565b82525050565b60006146b7828461438f565b915081905092915050565b60006020820190506146d760008301846141f0565b92915050565b60006080820190506146f260008301876141f0565b6146ff60208301866141f0565b61470c604083018561469c565b818103606083015261471e8184614356565b905095945050505050565b6000602082019050818103600083015261474381846141ff565b905092915050565b600060208201905081810360008301526147658184614274565b905092915050565b6000602082019050818103600083015261478781846142e9565b905092915050565b60006020820190506147a46000830184614347565b92915050565b600060208201905081810360008301526147c48184614447565b905092915050565b600060208201905081810360008301526147e581614480565b9050919050565b60006020820190508181036000830152614805816144a3565b9050919050565b60006020820190508181036000830152614825816144c6565b9050919050565b60006020820190508181036000830152614845816144e9565b9050919050565b600060208201905081810360008301526148658161450c565b9050919050565b600060208201905081810360008301526148858161452f565b9050919050565b600060208201905081810360008301526148a581614552565b9050919050565b600060208201905081810360008301526148c581614575565b9050919050565b600060208201905081810360008301526148e581614598565b9050919050565b60006020820190508181036000830152614905816145bb565b9050919050565b60006020820190508181036000830152614925816145de565b9050919050565b6000602082019050818103600083015261494581614601565b9050919050565b6000602082019050818103600083015261496581614624565b9050919050565b6000602082019050818103600083015261498581614647565b9050919050565b600060208201905081810360008301526149a58161466a565b9050919050565b60006020820190506149c1600083018461469c565b92915050565b60006149d16149e2565b90506149dd8282614cf9565b919050565b6000604051905090565b600067ffffffffffffffff821115614a0757614a06614e60565b5b614a1082614ea3565b9050602081019050919050565b600067ffffffffffffffff821115614a3857614a37614e60565b5b614a4182614ea3565b9050602081019050919050565b6000819050919050565b6000819050602082019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600060029050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000614b6182614c7b565b9150614b6c83614c7b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614ba157614ba0614da4565b5b828201905092915050565b6000614bb782614c7b565b9150614bc283614c7b565b925082614bd257614bd1614dd3565b5b828204905092915050565b6000614be882614c7b565b9150614bf383614c7b565b925082821015614c0657614c05614da4565b5b828203905092915050565b6000614c1c82614c5b565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015614cb2578082015181840152602081019050614c97565b83811115614cc1576000848401525b50505050565b60006002820490506001821680614cdf57607f821691505b60208210811415614cf357614cf2614e02565b5b50919050565b614d0282614ea3565b810181811067ffffffffffffffff82111715614d2157614d20614e60565b5b80604052505050565b6000614d3582614c7b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614d6857614d67614da4565b5b600182019050919050565b6000614d7e82614c7b565b9150614d8983614c7b565b925082614d9957614d98614dd3565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920736574206f66206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b6152ec81614c11565b81146152f757600080fd5b50565b61530381614c23565b811461530e57600080fd5b50565b61531a81614c2f565b811461532557600080fd5b50565b61533181614c7b565b811461533c57600080fd5b5056fea264697066735822122000af93e4bde0ee21dfb9b42cc5998d264ba92b9a3de9ceb78eb15acb461dd7b964736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103275760003560e01c80637cedbc1e116101b8578063c08e953d11610104578063dfc5e169116100a2578063e985e9c51161007c578063e985e9c514610ab4578063eb1d234d14610ae4578063f327579414610b14578063f880eb1914610b3057610327565b8063dfc5e16914610a38578063e08033d314610a68578063e257a94c14610a8457610327565b8063cef80b3a116100de578063cef80b3a146109b0578063d45fc516146109ce578063d654e993146109fe578063dcbe2ed914610a1a57610327565b8063c08e953d14610920578063c87b56dd14610950578063cd62ca1a1461098057610327565b806396d5a73911610171578063a99bee2e1161014b578063a99bee2e14610886578063aed47961146108a4578063b10a5dfa146108d4578063b88d4fde1461090457610327565b806396d5a7391461080a578063a0fd0c6a1461083a578063a22cb4651461086a57610327565b80637cedbc1e146107225780637eadfa6a1461075257806384eb8f6814610770578063912101cf1461078c578063932a196b146107bc57806395d89b41146107ec57610327565b806335011d90116102775780634ef4e80f1161023057806353c227cc1161020a57806353c227cc1461067657806361958158146106a65780636352211e146106c257806370a08231146106f257610327565b80634ef4e80f146105e65780635154380a14610616578063523796271461064657610327565b806335011d90146104ee5780633592dd801461051e578063390532711461053a57806342842e0e1461056a578063446a92e3146105865780634eb083ec146105b657610327565b8063144cbca6116102e45780631dacc07e116102be5780631dacc07e146104565780631e65e1171461047257806323b872dd146104a257806328520ab7146104be57610327565b8063144cbca6146103fe5780631677bf081461041c57806318160ddd1461043857610327565b8063015388681461032c57806301ffc9a71461034857806306fdde0314610378578063081812fc14610396578063095ea7b3146103c65780630ae240cf146103e2575b600080fd5b61034660048036038101906103419190613e51565b610b4e565b005b610362600480360381019061035d9190613c9a565b610bc2565b60405161036f919061478f565b60405180910390f35b610380610ca4565b60405161038d91906147aa565b60405180910390f35b6103b060048036038101906103ab9190613e24565b610d36565b6040516103bd91906146c2565b60405180910390f35b6103e060048036038101906103db9190613c5a565b610dbb565b005b6103fc60048036038101906103f79190613f38565b610ed3565b005b610406610f16565b60405161041391906149ac565b60405180910390f35b61043660048036038101906104319190613e51565b610f1c565b005b610440610f48565b60405161044d91906149ac565b60405180910390f35b610470600480360381019061046b9190613ff3565b610f52565b005b61048c60048036038101906104879190613cf4565b61107d565b604051610499919061474b565b60405180910390f35b6104bc60048036038101906104b79190613ad5565b6112a1565b005b6104d860048036038101906104d39190613e51565b611301565b6040516104e591906149ac565b60405180910390f35b61050860048036038101906105039190613beb565b6113da565b60405161051591906149ac565b60405180910390f35b61053860048036038101906105339190614102565b61143d565b005b610554600480360381019061054f91906140c2565b611481565b604051610561919061478f565b60405180910390f35b610584600480360381019061057f9190613ad5565b61151d565b005b6105a0600480360381019061059b9190613e24565b61153d565b6040516105ad91906147aa565b60405180910390f35b6105d060048036038101906105cb9190613e24565b6115e2565b6040516105dd91906147aa565b60405180910390f35b61060060048036038101906105fb91906140c2565b611687565b60405161060d91906149ac565b60405180910390f35b610630600480360381019061062b9190613e24565b6116b9565b60405161063d919061474b565b60405180910390f35b610660600480360381019061065b9190613cf4565b611869565b60405161066d91906149ac565b60405180910390f35b610690600480360381019061068b9190613e24565b611899565b60405161069d91906147aa565b60405180910390f35b6106c060048036038101906106bb9190613ead565b611939565b005b6106dc60048036038101906106d79190613e24565b6119d2565b6040516106e991906146c2565b60405180910390f35b61070c60048036038101906107079190613a68565b611a84565b60405161071991906149ac565b60405180910390f35b61073c60048036038101906107379190613e24565b611b3c565b60405161074991906147aa565b60405180910390f35b61075a611bf5565b60405161076791906149ac565b60405180910390f35b61078a60048036038101906107859190613e51565b611bff565b005b6107a660048036038101906107a191906140c2565b611c2b565b6040516107b3919061474b565b60405180910390f35b6107d660048036038101906107d19190613cf4565b611f0a565b6040516107e391906149ac565b60405180910390f35b6107f4611f79565b60405161080191906147aa565b60405180910390f35b610824600480360381019061081f9190613e24565b61200b565b604051610831919061476d565b60405180910390f35b610854600480360381019061084f9190613e24565b61216d565b6040516108619190614729565b60405180910390f35b610884600480360381019061087f9190613bab565b61224d565b005b61088e612263565b60405161089b91906149ac565b60405180910390f35b6108be60048036038101906108b99190613e24565b612269565b6040516108cb919061474b565b60405180910390f35b6108ee60048036038101906108e991906140c2565b612419565b6040516108fb91906147aa565b60405180910390f35b61091e60048036038101906109199190613b28565b6124c9565b005b61093a60048036038101906109359190613db5565b61252b565b60405161094791906149ac565b60405180910390f35b61096a60048036038101906109659190613e24565b61256f565b60405161097791906147aa565b60405180910390f35b61099a60048036038101906109959190613cf4565b61265c565b6040516109a791906149ac565b60405180910390f35b6109b86126df565b6040516109c591906149ac565b60405180910390f35b6109e860048036038101906109e39190613cf4565b6126e5565b6040516109f591906149ac565b60405180910390f35b610a186004803603810190610a139190614102565b612754565b005b610a22612798565b604051610a2f91906149ac565b60405180910390f35b610a526004803603810190610a4d9190613e24565b61279e565b604051610a5f91906147aa565b60405180910390f35b610a826004803603810190610a7d9190613e51565b61283e565b005b610a9e6004803603810190610a999190613d3d565b61286a565b604051610aab91906149ac565b60405180910390f35b610ace6004803603810190610ac99190613a95565b6128dd565b604051610adb919061478f565b60405180910390f35b610afe6004803603810190610af99190613e24565b612971565b604051610b0b919061474b565b60405180910390f35b610b2e6004803603810190610b299190614171565b612b21565b005b610b38612b5d565b604051610b4591906149ac565b60405180910390f35b610b5782612b67565b610b96576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8d9061492c565b60405180910390fd5b80601560008481526020019081526020016000209080519060200190610bbd92919061370b565b505050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610c8d57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610c9d5750610c9c82612bd3565b5b9050919050565b606060008054610cb390614cc7565b80601f0160208091040260200160405190810160405280929190818152602001828054610cdf90614cc7565b8015610d2c5780601f10610d0157610100808354040283529160200191610d2c565b820191906000526020600020905b815481529060010190602001808311610d0f57829003601f168201915b5050505050905090565b6000610d4182612b67565b610d80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d779061490c565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610dc6826119d2565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610e37576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2e9061496c565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610e56612c3d565b73ffffffffffffffffffffffffffffffffffffffff161480610e855750610e8481610e7f612c3d565b6128dd565b5b610ec4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ebb9061488c565b60405180910390fd5b610ece8383612c45565b505050565b60405180606001604052808281526020018381526020018481525060106000868152602001908152602001600020906003610f0f929190613791565b5050505050565b600e5481565b80601960008481526020019081526020016000209080519060200190610f4392919061370b565b505050565b6000600654905090565b6000610ff983601560008981526020019081526020016000208054610f7690614cc7565b80601f0160208091040260200160405190810160405280929190818152602001828054610fa290614cc7565b8015610fef5780601f10610fc457610100808354040283529160200191610fef565b820191906000526020600020905b815481529060010190602001808311610fd257829003601f168201915b5050505050611301565b90508360156000888152602001908152602001600020908051906020019061102292919061370b565b5061102e81848661143d565b6110388383610f1c565b611045600d548787612754565b600d600081548092919061105890614d2a565b91905055506007600081548092919061107090614d2a565b9190505550505050505050565b606060008060005b6008548110156110fb578480519060200120601660008381526020019081526020016000206000600281106110bd576110bc614e31565b5b016040516110cb91906146ab565b604051809103902014156110e85782806110e490614d2a565b9350505b80806110f390614d2a565b915050611085565b5060008267ffffffffffffffff81111561111857611117614e60565b5b60405190808252806020026020018201604052801561114b57816020015b60608152602001906001900390816111365790505b50905060005b6008548110156112955785805190602001206016600083815260200190815260200160002060006002811061118957611188614e31565b5b0160405161119791906146ab565b6040518091039020141561128257601660008281526020019081526020016000206001600281106111cb576111ca614e31565b5b0180546111d790614cc7565b80601f016020809104026020016040519081016040528092919081815260200182805461120390614cc7565b80156112505780601f1061122557610100808354040283529160200191611250565b820191906000526020600020905b81548152906001019060200180831161123357829003601f168201915b505050505082848151811061126857611267614e31565b5b6020026020010181905250828061127e90614d2a565b9350505b808061128d90614d2a565b915050611151565b50809350505050919050565b6112b26112ac612c3d565b82612cfe565b6112f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112e89061498c565b60405180910390fd5b6112fc838383612ddc565b505050565b600080600090505b600c548110156113ce5761131c84613043565b80519060200120600f600083815260200190815260200160002060006002811061134957611348614e31565b5b0160405161135791906146ab565b60405180910390201480156113ad57508280519060200120600f600083815260200190815260200160002060016002811061139557611394614e31565b5b016040516113a391906146ab565b6040518091039020145b156113bb57809150506113d4565b80806113c690614d2a565b915050611309565b50600090505b92915050565b60006113e8846006546131a4565b6113f460065484610b4e565b611401600c54838561143d565b6006600081548092919061141490614d2a565b9190505550600c600081548092919061142c90614d2a565b919050555060065490509392505050565b604051806040016040528061145184613043565b815260200182815250600f600085815260200190815260200160002090600261147b9291906137e4565b50505050565b600080600090505b600a548110156115115783601160008381526020019081526020016000206000600281106114ba576114b9614e31565b5b01541480156114ef575082601160008381526020019081526020016000206001600281106114eb576114ea614e31565b5b0154145b156114fe576001915050611517565b808061150990614d2a565b915050611489565b50600090505b92915050565b611538838383604051806020016040528060008152506124c9565b505050565b606060146000838152602001908152602001600020805461155d90614cc7565b80601f016020809104026020016040519081016040528092919081815260200182805461158990614cc7565b80156115d65780601f106115ab576101008083540402835291602001916115d6565b820191906000526020600020905b8154815290600101906020018083116115b957829003601f168201915b50505050509050919050565b606060196000838152602001908152602001600020805461160290614cc7565b80601f016020809104026020016040519081016040528092919081815260200182805461162e90614cc7565b801561167b5780601f106116505761010080835404028352916020019161167b565b820191906000526020600020905b81548152906001019060200180831161165e57829003601f168201915b50505050509050919050565b6000611696600a548484612b21565b600a60008154809291906116a990614d2a565b9190505550600a54905092915050565b60606000600a67ffffffffffffffff8111156116d8576116d7614e60565b5b60405190808252806020026020018201604052801561170b57816020015b60608152602001906001900390816116f65790505b5090506000805b600d5481101561185e5761172585613043565b805190602001206012600083815260200190815260200160002060006002811061175257611751614e31565b5b0160405161176091906146ab565b6040518091039020141561184b576012600082815260200190815260200160002060016002811061179457611793614e31565b5b0180546117a090614cc7565b80601f01602080910402602001604051908101604052809291908181526020018280546117cc90614cc7565b80156118195780601f106117ee57610100808354040283529160200191611819565b820191906000526020600020905b8154815290600101906020018083116117fc57829003601f168201915b505050505083838151811061183157611830614e31565b5b6020026020010181905250818061184790614d2a565b9250505b808061185690614d2a565b915050611712565b508192505050919050565b600061187760095483611bff565b6009600081548092919061188a90614d2a565b91905055506009549050919050565b601860205280600052604060002060009150905080546118b890614cc7565b80601f01602080910402602001604051908101604052809291908181526020018280546118e490614cc7565b80156119315780601f1061190657610100808354040283529160200191611931565b820191906000526020600020905b81548152906001019060200180831161191457829003601f168201915b505050505081565b6040518060400160405280838152602001828152506016600085815260200190815260200160002090600261196f9291906137e4565b506040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152506019600085815260200190815260200160002090805190602001906119cc92919061370b565b50505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611a7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a72906148cc565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611af5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aec906148ac565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060136000838152602001908152602001600020600060028110611b6457611b63614e31565b5b018054611b7090614cc7565b80601f0160208091040260200160405190810160405280929190818152602001828054611b9c90614cc7565b8015611be95780601f10611bbe57610100808354040283529160200191611be9565b820191906000526020600020905b815481529060010190602001808311611bcc57829003601f168201915b50505050509050919050565b6000600854905090565b80601760008481526020019081526020016000209080519060200190611c2692919061370b565b505050565b606060008060005b600b54811015611d0657611c4686613043565b8051906020012060106000838152602001908152602001600020600060038110611c7357611c72614e31565b5b01604051611c8191906146ab565b6040518091039020148015611cdf5750611c9a85613043565b8051906020012060106000838152602001908152602001600020600160038110611cc757611cc6614e31565b5b01604051611cd591906146ab565b6040518091039020145b15611cf3578280611cef90614d2a565b9350505b8080611cfe90614d2a565b915050611c33565b5060008267ffffffffffffffff811115611d2357611d22614e60565b5b604051908082528060200260200182016040528015611d5657816020015b6060815260200190600190039081611d415790505b50905060005b600b54811015611efd57611d6f87613043565b8051906020012060106000838152602001908152602001600020600060038110611d9c57611d9b614e31565b5b01604051611daa91906146ab565b6040518091039020148015611e085750611dc386613043565b8051906020012060106000838152602001908152602001600020600160038110611df057611def614e31565b5b01604051611dfe91906146ab565b6040518091039020145b15611eea5760106000828152602001908152602001600020600260038110611e3357611e32614e31565b5b018054611e3f90614cc7565b80601f0160208091040260200160405190810160405280929190818152602001828054611e6b90614cc7565b8015611eb85780601f10611e8d57610100808354040283529160200191611eb8565b820191906000526020600020905b815481529060010190602001808311611e9b57829003601f168201915b5050505050828481518110611ed057611ecf614e31565b5b60200260200101819052508280611ee690614d2a565b9350505b8080611ef590614d2a565b915050611d5c565b5080935050505092915050565b600080600090505b600654811015611f6e57828051906020012060156000838152602001908152602001600020604051611f4491906146ab565b60405180910390201415611f5b5780915050611f74565b8080611f6690614d2a565b915050611f12565b50600090505b919050565b606060018054611f8890614cc7565b80601f0160208091040260200160405190810160405280929190818152602001828054611fb490614cc7565b80156120015780601f10611fd657610100808354040283529160200191612001565b820191906000526020600020905b815481529060010190602001808311611fe457829003601f168201915b5050505050905090565b606060008060005b600a5481101561206e57846011600083815260200190815260200160002060006002811061204457612043614e31565b5b0154141561205b57828061205790614d2a565b9350505b808061206690614d2a565b915050612013565b5060008267ffffffffffffffff81111561208b5761208a614e60565b5b6040519080825280602002602001820160405280156120b95781602001602082028036833780820191505090505b50905060005b600a548110156121615785601160008381526020019081526020016000206000600281106120f0576120ef614e31565b5b0154141561214e576011600082815260200190815260200160002060016002811061211e5761211d614e31565b5b015482848151811061213357612132614e31565b5b602002602001018181525050828061214a90614d2a565b9350505b808061215990614d2a565b9150506120bf565b50809350505050919050565b612175613837565b60166000838152602001908152602001600020600280602002604051908101604052809291906000905b828210156122425783820180546121b590614cc7565b80601f01602080910402602001604051908101604052809291908181526020018280546121e190614cc7565b801561222e5780601f106122035761010080835404028352916020019161222e565b820191906000526020600020905b81548152906001019060200180831161221157829003601f168201915b50505050508152602001906001019061219f565b505050509050919050565b61225f612258612c3d565b838361337e565b5050565b60095481565b60606000600a67ffffffffffffffff81111561228857612287614e60565b5b6040519080825280602002602001820160405280156122bb57816020015b60608152602001906001900390816122a65790505b5090506000805b600d5481101561240e576122d585613043565b805190602001206012600083815260200190815260200160002060006002811061230257612301614e31565b5b0160405161231091906146ab565b604051809103902014156123fb576012600082815260200190815260200160002060016002811061234457612343614e31565b5b01805461235090614cc7565b80601f016020809104026020016040519081016040528092919081815260200182805461237c90614cc7565b80156123c95780601f1061239e576101008083540402835291602001916123c9565b820191906000526020600020905b8154815290600101906020018083116123ac57829003601f168201915b50505050508383815181106123e1576123e0614e31565b5b602002602001018190525081806123f790614d2a565b9250505b808061240690614d2a565b9150506122c2565b508192505050919050565b6013602052816000526040600020816002811061243557600080fd5b0160009150915050805461244890614cc7565b80601f016020809104026020016040519081016040528092919081815260200182805461247490614cc7565b80156124c15780601f10612496576101008083540402835291602001916124c1565b820191906000526020600020905b8154815290600101906020018083116124a457829003601f168201915b505050505081565b6124da6124d4612c3d565b83612cfe565b612519576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125109061498c565b60405180910390fd5b612525848484846134eb565b50505050565b600061254b600b548561253d86613043565b61254686613043565b610ed3565b600b600081548092919061255e90614d2a565b9190505550600b5490509392505050565b606061257a82612b67565b6125b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125b09061494c565b60405180910390fd5b6015600083815260200190815260200160002080546125d790614cc7565b80601f016020809104026020016040519081016040528092919081815260200182805461260390614cc7565b80156126505780601f1061262557610100808354040283529160200191612650565b820191906000526020600020905b81548152906001019060200180831161263357829003601f168201915b50505050509050919050565b600080600090505b6008548110156126d45782805190602001206016600083815260200190815260200160002060016002811061269c5761269b614e31565b5b016040516126aa91906146ab565b604051809103902014156126c157809150506126da565b80806126cc90614d2a565b915050612664565b50600090505b919050565b600a5481565b600080600090505b6007548110156127495782805190602001206014600083815260200190815260200160002060405161271f91906146ab565b60405180910390201415612736578091505061274f565b808061274190614d2a565b9150506126ed565b50600090505b919050565b604051806040016040528061276884613043565b815260200182815250601260008581526020019081526020016000209060026127929291906137e4565b50505050565b600b5481565b601760205280600052604060002060009150905080546127bd90614cc7565b80601f01602080910402602001604051908101604052809291908181526020018280546127e990614cc7565b80156128365780601f1061280b57610100808354040283529160200191612836565b820191906000526020600020905b81548152906001019060200180831161281957829003601f168201915b505050505081565b8060146000848152602001908152602001600020908051906020019061286592919061370b565b505050565b60006128796008548484611939565b6128ba6008546040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250610f1c565b600860008154809291906128cd90614d2a565b9190505550600854905092915050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60606000600a67ffffffffffffffff8111156129905761298f614e60565b5b6040519080825280602002602001820160405280156129c357816020015b60608152602001906001900390816129ae5790505b5090506000805b600c54811015612b16576129dd85613043565b80519060200120600f6000838152602001908152602001600020600060028110612a0a57612a09614e31565b5b01604051612a1891906146ab565b60405180910390201415612b0357600f6000828152602001908152602001600020600160028110612a4c57612a4b614e31565b5b018054612a5890614cc7565b80601f0160208091040260200160405190810160405280929190818152602001828054612a8490614cc7565b8015612ad15780601f10612aa657610100808354040283529160200191612ad1565b820191906000526020600020905b815481529060010190602001808311612ab457829003601f168201915b5050505050838381518110612ae957612ae8614e31565b5b60200260200101819052508180612aff90614d2a565b9250505b8080612b0e90614d2a565b9150506129ca565b508192505050919050565b60405180604001604052808281526020018381525060116000858152602001908152602001600020906002612b5792919061385e565b50505050565b6000600a54905090565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16612cb8836119d2565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000612d0982612b67565b612d48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d3f9061486c565b60405180910390fd5b6000612d53836119d2565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480612d955750612d9481856128dd565b5b80612dd357508373ffffffffffffffffffffffffffffffffffffffff16612dbb84610d36565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16612dfc826119d2565b73ffffffffffffffffffffffffffffffffffffffff1614612e52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e49906147ec565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612ec2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612eb99061482c565b60405180910390fd5b612ecd838383613547565b612ed8600082612c45565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612f289190614bdd565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612f7f9190614b56565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461303e83838361354c565b505050565b6060600082141561308b576040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250905061319f565b600082905060005b600082146130bd5780806130a690614d2a565b915050600a826130b69190614bac565b9150613093565b60008167ffffffffffffffff8111156130d9576130d8614e60565b5b6040519080825280601f01601f19166020018201604052801561310b5781602001600182028036833780820191505090505b5090505b60008514613198576001826131249190614bdd565b9150600a856131339190614d73565b603061313f9190614b56565b60f81b81838151811061315557613154614e31565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856131919190614bac565b945061310f565b8093505050505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415613214576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161320b906148ec565b60405180910390fd5b61321d81612b67565b1561325d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132549061480c565b60405180910390fd5b61326960008383613547565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546132b99190614b56565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461337a6000838361354c565b5050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156133ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133e49061484c565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516134de919061478f565b60405180910390a3505050565b6134f6848484612ddc565b61350284848484613551565b613541576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613538906147cc565b60405180910390fd5b50505050565b505050565b505050565b60006135728473ffffffffffffffffffffffffffffffffffffffff166136e8565b156136db578373ffffffffffffffffffffffffffffffffffffffff1663150b7a0261359b612c3d565b8786866040518563ffffffff1660e01b81526004016135bd94939291906146dd565b602060405180830381600087803b1580156135d757600080fd5b505af192505050801561360857506040513d601f19601f820116820180604052508101906136059190613cc7565b60015b61368b573d8060008114613638576040519150601f19603f3d011682016040523d82523d6000602084013e61363d565b606091505b50600081511415613683576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161367a906147cc565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506136e0565b600190505b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b82805461371790614cc7565b90600052602060002090601f0160209004810192826137395760008555613780565b82601f1061375257805160ff1916838001178555613780565b82800160010185558215613780579182015b8281111561377f578251825591602001919060010190613764565b5b50905061378d919061389e565b5090565b82600381019282156137d3579160200282015b828111156137d25782518290805190602001906137c292919061370b565b50916020019190600101906137a4565b5b5090506137e091906138bb565b5090565b8260028101928215613826579160200282015b8281111561382557825182908051906020019061381592919061370b565b50916020019190600101906137f7565b5b50905061383391906138bb565b5090565b60405180604001604052806002905b60608152602001906001900390816138465790505090565b826002810192821561388d579160200282015b8281111561388c578251825591602001919060010190613871565b5b50905061389a919061389e565b5090565b5b808211156138b757600081600090555060010161389f565b5090565b5b808211156138db57600081816138d291906138df565b506001016138bc565b5090565b5080546138eb90614cc7565b6000825580601f106138fd575061391c565b601f01602090049060005260206000209081019061391b919061389e565b5b50565b600061393261392d846149ec565b6149c7565b90508281526020810184848401111561394e5761394d614e94565b5b613959848285614c85565b509392505050565b600061397461396f84614a1d565b6149c7565b9050828152602081018484840111156139905761398f614e94565b5b61399b848285614c85565b509392505050565b6000813590506139b2816152e3565b92915050565b6000813590506139c7816152fa565b92915050565b6000813590506139dc81615311565b92915050565b6000815190506139f181615311565b92915050565b600082601f830112613a0c57613a0b614e8f565b5b8135613a1c84826020860161391f565b91505092915050565b600082601f830112613a3a57613a39614e8f565b5b8135613a4a848260208601613961565b91505092915050565b600081359050613a6281615328565b92915050565b600060208284031215613a7e57613a7d614e9e565b5b6000613a8c848285016139a3565b91505092915050565b60008060408385031215613aac57613aab614e9e565b5b6000613aba858286016139a3565b9250506020613acb858286016139a3565b9150509250929050565b600080600060608486031215613aee57613aed614e9e565b5b6000613afc868287016139a3565b9350506020613b0d868287016139a3565b9250506040613b1e86828701613a53565b9150509250925092565b60008060008060808587031215613b4257613b41614e9e565b5b6000613b50878288016139a3565b9450506020613b61878288016139a3565b9350506040613b7287828801613a53565b925050606085013567ffffffffffffffff811115613b9357613b92614e99565b5b613b9f878288016139f7565b91505092959194509250565b60008060408385031215613bc257613bc1614e9e565b5b6000613bd0858286016139a3565b9250506020613be1858286016139b8565b9150509250929050565b600080600060608486031215613c0457613c03614e9e565b5b6000613c12868287016139a3565b935050602084013567ffffffffffffffff811115613c3357613c32614e99565b5b613c3f86828701613a25565b9250506040613c5086828701613a53565b9150509250925092565b60008060408385031215613c7157613c70614e9e565b5b6000613c7f858286016139a3565b9250506020613c9085828601613a53565b9150509250929050565b600060208284031215613cb057613caf614e9e565b5b6000613cbe848285016139cd565b91505092915050565b600060208284031215613cdd57613cdc614e9e565b5b6000613ceb848285016139e2565b91505092915050565b600060208284031215613d0a57613d09614e9e565b5b600082013567ffffffffffffffff811115613d2857613d27614e99565b5b613d3484828501613a25565b91505092915050565b60008060408385031215613d5457613d53614e9e565b5b600083013567ffffffffffffffff811115613d7257613d71614e99565b5b613d7e85828601613a25565b925050602083013567ffffffffffffffff811115613d9f57613d9e614e99565b5b613dab85828601613a25565b9150509250929050565b600080600060608486031215613dce57613dcd614e9e565b5b600084013567ffffffffffffffff811115613dec57613deb614e99565b5b613df886828701613a25565b9350506020613e0986828701613a53565b9250506040613e1a86828701613a53565b9150509250925092565b600060208284031215613e3a57613e39614e9e565b5b6000613e4884828501613a53565b91505092915050565b60008060408385031215613e6857613e67614e9e565b5b6000613e7685828601613a53565b925050602083013567ffffffffffffffff811115613e9757613e96614e99565b5b613ea385828601613a25565b9150509250929050565b600080600060608486031215613ec657613ec5614e9e565b5b6000613ed486828701613a53565b935050602084013567ffffffffffffffff811115613ef557613ef4614e99565b5b613f0186828701613a25565b925050604084013567ffffffffffffffff811115613f2257613f21614e99565b5b613f2e86828701613a25565b9150509250925092565b60008060008060808587031215613f5257613f51614e9e565b5b6000613f6087828801613a53565b945050602085013567ffffffffffffffff811115613f8157613f80614e99565b5b613f8d87828801613a25565b935050604085013567ffffffffffffffff811115613fae57613fad614e99565b5b613fba87828801613a25565b925050606085013567ffffffffffffffff811115613fdb57613fda614e99565b5b613fe787828801613a25565b91505092959194509250565b600080600080600060a0868803121561400f5761400e614e9e565b5b600061401d88828901613a53565b955050602086013567ffffffffffffffff81111561403e5761403d614e99565b5b61404a88828901613a25565b945050604086013567ffffffffffffffff81111561406b5761406a614e99565b5b61407788828901613a25565b935050606061408888828901613a53565b925050608086013567ffffffffffffffff8111156140a9576140a8614e99565b5b6140b588828901613a25565b9150509295509295909350565b600080604083850312156140d9576140d8614e9e565b5b60006140e785828601613a53565b92505060206140f885828601613a53565b9150509250929050565b60008060006060848603121561411b5761411a614e9e565b5b600061412986828701613a53565b935050602061413a86828701613a53565b925050604084013567ffffffffffffffff81111561415b5761415a614e99565b5b61416786828701613a25565b9150509250925092565b60008060006060848603121561418a57614189614e9e565b5b600061419886828701613a53565b93505060206141a986828701613a53565b92505060406141ba86828701613a53565b9150509250925092565b60006141d0838361440e565b905092915050565b60006141e4838361468d565b60208301905092915050565b6141f981614c11565b82525050565b600061420a82614a8d565b6142148185614aeb565b93508360208202850161422685614a4e565b8060005b85811015614262578484038952815161424385826141c4565b945061424e83614ac4565b925060208a0199505060018101905061422a565b50829750879550505050505092915050565b600061427f82614a98565b6142898185614af6565b93508360208202850161429b85614a58565b8060005b858110156142d757848403895281516142b885826141c4565b94506142c383614ad1565b925060208a0199505060018101905061429f565b50829750879550505050505092915050565b60006142f482614aa3565b6142fe8185614b07565b935061430983614a68565b8060005b8381101561433a57815161432188826141d8565b975061432c83614ade565b92505060018101905061430d565b5085935050505092915050565b61435081614c23565b82525050565b600061436182614aae565b61436b8185614b18565b935061437b818560208601614c94565b61438481614ea3565b840191505092915050565b6000815461439c81614cc7565b6143a68186614b29565b945060018216600081146143c157600181146143d257614405565b60ff19831686528186019350614405565b6143db85614a78565b60005b838110156143fd578154818901526001820191506020810190506143de565b838801955050505b50505092915050565b600061441982614ab9565b6144238185614b34565b9350614433818560208601614c94565b61443c81614ea3565b840191505092915050565b600061445282614ab9565b61445c8185614b45565b935061446c818560208601614c94565b61447581614ea3565b840191505092915050565b600061448d603283614b45565b915061449882614eb4565b604082019050919050565b60006144b0602583614b45565b91506144bb82614f03565b604082019050919050565b60006144d3601c83614b45565b91506144de82614f52565b602082019050919050565b60006144f6602483614b45565b915061450182614f7b565b604082019050919050565b6000614519601983614b45565b915061452482614fca565b602082019050919050565b600061453c602c83614b45565b915061454782614ff3565b604082019050919050565b600061455f603883614b45565b915061456a82615042565b604082019050919050565b6000614582602a83614b45565b915061458d82615091565b604082019050919050565b60006145a5602983614b45565b91506145b0826150e0565b604082019050919050565b60006145c8602083614b45565b91506145d38261512f565b602082019050919050565b60006145eb602c83614b45565b91506145f682615158565b604082019050919050565b600061460e602c83614b45565b9150614619826151a7565b604082019050919050565b6000614631602f83614b45565b915061463c826151f6565b604082019050919050565b6000614654602183614b45565b915061465f82615245565b604082019050919050565b6000614677603183614b45565b915061468282615294565b604082019050919050565b61469681614c7b565b82525050565b6146a581614c7b565b82525050565b60006146b7828461438f565b915081905092915050565b60006020820190506146d760008301846141f0565b92915050565b60006080820190506146f260008301876141f0565b6146ff60208301866141f0565b61470c604083018561469c565b818103606083015261471e8184614356565b905095945050505050565b6000602082019050818103600083015261474381846141ff565b905092915050565b600060208201905081810360008301526147658184614274565b905092915050565b6000602082019050818103600083015261478781846142e9565b905092915050565b60006020820190506147a46000830184614347565b92915050565b600060208201905081810360008301526147c48184614447565b905092915050565b600060208201905081810360008301526147e581614480565b9050919050565b60006020820190508181036000830152614805816144a3565b9050919050565b60006020820190508181036000830152614825816144c6565b9050919050565b60006020820190508181036000830152614845816144e9565b9050919050565b600060208201905081810360008301526148658161450c565b9050919050565b600060208201905081810360008301526148858161452f565b9050919050565b600060208201905081810360008301526148a581614552565b9050919050565b600060208201905081810360008301526148c581614575565b9050919050565b600060208201905081810360008301526148e581614598565b9050919050565b60006020820190508181036000830152614905816145bb565b9050919050565b60006020820190508181036000830152614925816145de565b9050919050565b6000602082019050818103600083015261494581614601565b9050919050565b6000602082019050818103600083015261496581614624565b9050919050565b6000602082019050818103600083015261498581614647565b9050919050565b600060208201905081810360008301526149a58161466a565b9050919050565b60006020820190506149c1600083018461469c565b92915050565b60006149d16149e2565b90506149dd8282614cf9565b919050565b6000604051905090565b600067ffffffffffffffff821115614a0757614a06614e60565b5b614a1082614ea3565b9050602081019050919050565b600067ffffffffffffffff821115614a3857614a37614e60565b5b614a4182614ea3565b9050602081019050919050565b6000819050919050565b6000819050602082019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600060029050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000614b6182614c7b565b9150614b6c83614c7b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614ba157614ba0614da4565b5b828201905092915050565b6000614bb782614c7b565b9150614bc283614c7b565b925082614bd257614bd1614dd3565b5b828204905092915050565b6000614be882614c7b565b9150614bf383614c7b565b925082821015614c0657614c05614da4565b5b828203905092915050565b6000614c1c82614c5b565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015614cb2578082015181840152602081019050614c97565b83811115614cc1576000848401525b50505050565b60006002820490506001821680614cdf57607f821691505b60208210811415614cf357614cf2614e02565b5b50919050565b614d0282614ea3565b810181811067ffffffffffffffff82111715614d2157614d20614e60565b5b80604052505050565b6000614d3582614c7b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614d6857614d67614da4565b5b600182019050919050565b6000614d7e82614c7b565b9150614d8983614c7b565b925082614d9957614d98614dd3565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920736574206f66206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b6152ec81614c11565b81146152f757600080fd5b50565b61530381614c23565b811461530e57600080fd5b50565b61531a81614c2f565b811461532557600080fd5b50565b61533181614c7b565b811461533c57600080fd5b5056fea264697066735822122000af93e4bde0ee21dfb9b42cc5998d264ba92b9a3de9ceb78eb15acb461dd7b964736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 25,
        "contract": "contracts/BTTCERC721.sol:BTTCERC721",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 27,
        "contract": "contracts/BTTCERC721.sol:BTTCERC721",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 31,
        "contract": "contracts/BTTCERC721.sol:BTTCERC721",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 35,
        "contract": "contracts/BTTCERC721.sol:BTTCERC721",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 39,
        "contract": "contracts/BTTCERC721.sol:BTTCERC721",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 45,
        "contract": "contracts/BTTCERC721.sol:BTTCERC721",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1590,
        "contract": "contracts/BTTCERC721.sol:BTTCERC721",
        "label": "_tokenIds",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1592,
        "contract": "contracts/BTTCERC721.sol:BTTCERC721",
        "label": "_bidIds",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1594,
        "contract": "contracts/BTTCERC721.sol:BTTCERC721",
        "label": "_eventIds",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1596,
        "contract": "contracts/BTTCERC721.sol:BTTCERC721",
        "label": "_GrantEventIds",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1598,
        "contract": "contracts/BTTCERC721.sol:BTTCERC721",
        "label": "_GrantProjectIds",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 1600,
        "contract": "contracts/BTTCERC721.sol:BTTCERC721",
        "label": "_GrantVoteIds",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 1602,
        "contract": "contracts/BTTCERC721.sol:BTTCERC721",
        "label": "_EventTokenIds",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 1604,
        "contract": "contracts/BTTCERC721.sol:BTTCERC721",
        "label": "_TokenBidIds",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 1606,
        "contract": "contracts/BTTCERC721.sol:BTTCERC721",
        "label": "_EventTokenSearchIds",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 1612,
        "contract": "contracts/BTTCERC721.sol:BTTCERC721",
        "label": "AllEventTokens",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_array(t_string_storage)2_storage)"
      },
      {
        "astId": 1618,
        "contract": "contracts/BTTCERC721.sol:BTTCERC721",
        "label": "AllGrantVotes",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_array(t_string_storage)3_storage)"
      },
      {
        "astId": 1624,
        "contract": "contracts/BTTCERC721.sol:BTTCERC721",
        "label": "AllGrantProject",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_array(t_uint256)2_storage)"
      },
      {
        "astId": 1630,
        "contract": "contracts/BTTCERC721.sol:BTTCERC721",
        "label": "AllTokensBids",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_array(t_string_storage)2_storage)"
      },
      {
        "astId": 1636,
        "contract": "contracts/BTTCERC721.sol:BTTCERC721",
        "label": "_SearchedStore",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_uint256,t_array(t_string_storage)2_storage)"
      },
      {
        "astId": 1640,
        "contract": "contracts/BTTCERC721.sol:BTTCERC721",
        "label": "_bidURIs",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 1644,
        "contract": "contracts/BTTCERC721.sol:BTTCERC721",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 1650,
        "contract": "contracts/BTTCERC721.sol:BTTCERC721",
        "label": "_eventURIs",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_uint256,t_array(t_string_storage)2_storage)"
      },
      {
        "astId": 1654,
        "contract": "contracts/BTTCERC721.sol:BTTCERC721",
        "label": "_GrantEventURIs",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 1658,
        "contract": "contracts/BTTCERC721.sol:BTTCERC721",
        "label": "_JudgerURIs",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 1662,
        "contract": "contracts/BTTCERC721.sol:BTTCERC721",
        "label": "_eventRaised",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 1666,
        "contract": "contracts/BTTCERC721.sol:BTTCERC721",
        "label": "_eventTokens",
        "offset": 0,
        "slot": "26",
        "type": "t_mapping(t_string_memory_ptr,t_string_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)2_storage": {
        "base": "t_string_storage",
        "encoding": "inplace",
        "label": "string[2]",
        "numberOfBytes": "64"
      },
      "t_array(t_string_storage)3_storage": {
        "base": "t_string_storage",
        "encoding": "inplace",
        "label": "string[3]",
        "numberOfBytes": "96"
      },
      "t_array(t_uint256)2_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[2]",
        "numberOfBytes": "64"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_string_storage)2_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string[2])",
        "numberOfBytes": "32",
        "value": "t_array(t_string_storage)2_storage"
      },
      "t_mapping(t_uint256,t_array(t_string_storage)3_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string[3])",
        "numberOfBytes": "32",
        "value": "t_array(t_string_storage)3_storage"
      },
      "t_mapping(t_uint256,t_array(t_uint256)2_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[2])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)2_storage"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}